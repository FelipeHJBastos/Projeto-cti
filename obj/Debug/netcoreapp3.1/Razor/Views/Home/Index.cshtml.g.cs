#pragma checksum "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5c13f435ed964b68be92df1b0609688683e16f0f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\felip\Documents\git\Projeto-cti\Views\_ViewImports.cshtml"
using Projeto_cti;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\felip\Documents\git\Projeto-cti\Views\_ViewImports.cshtml"
using Projeto_cti.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5c13f435ed964b68be92df1b0609688683e16f0f", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"558e789309b424544315a43ae1039bee120fa5fc", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c13f435ed964b68be92df1b0609688683e16f0f2997", async() => {
                WriteLiteral("\r\n    <script src=\'https://cdn.plot.ly/plotly-latest.min.js\'></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\"></script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div class=""content"">
    <div class=""container-fluid"">
        <div class=""row"">
            <div class=""col-md-6"">
                <div class=""card "">
                    <div class=""card-header "">
                        <h4 class=""card-title"">Temperatura da Estufa</h4>
                    </div>
                    <div class=""card-body "">
                        <div id=""temperatura""></div>
                    </div>
                </div>
            </div>
            <div class=""col-md-6"">
                <div class=""card "">
                    <div class=""card-header "">
                        <h4 class=""card-title"">Úmidade da Estufa</h4>
                    </div>
                    <div class=""card-body "">
                        <div class=""chart"">
                            <div id=""umidade""></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""row"">
            <div class=""col");
            WriteLiteral(@"-md-12"">
                    <table class=""table table-bordered"">
                        <thead class=""thead-dark"">
                            <th>Hora</th>
                            <th>Umidade</th>
                            <th>Temperatura</th>  
                        </thead>
                        <tbody>
                        
                        </tbody>
                    </table>
                    <script id=""tmplLinha"" type=""text/template"">
                        <tr>
                            <td>{{Hora}}</td>
                            <td>{{Umidade}}</td>
                            <td>{{Temperatura}}</td>
                        </tr>
                    </script>
            </div>
        </div>
    </div>
</div>

<script>

var dataTemperatura = [
    {
        type: ""indicator"",
        mode: ""gauge+number"",
        value: 23,
        number: {suffix: ""°C""},
        title: { text: ""Temperatura"", font: { size: 24 } },
        gauge: {
    ");
            WriteLiteral(@"        axis: { visible: false, range: [0, 45], tickwidth: 1},
            bar: { color: ""#80FF00"" },
            borderwidth: 1,
            steps: [
                { range: [0, 18], color: ""#FA5858"" },
                { range: [18, 19], color: ""#F7FE2E"" },
                { range: [19, 24], color: ""#2EFE2E"" },
                { range: [24, 25], color: ""#F7FE2E"" },
                { range: [25, 45], color: ""#FA5858"" }
            ],
        }
    }
];

var layoutTemperatura = {
    width: 450,
    height: 300,
    margin: { t: 25, r: 25, l: 25, b: 25 },
    font: { color: ""black"", family: ""Arial"" }
};
Plotly.newPlot('temperatura', dataTemperatura, layoutTemperatura);


var dataUmidade = [
    {
        type: ""indicator"",
        mode: ""gauge+number"",
        value: 23,
        number: {suffix: ""°C""},
        title: { text: ""Umidade"", font: { size: 24 } },
        gauge: {
            axis: { visible: false, range: [0, 45], tickwidth: 1},
            bar: { color: ""#80FF00"" },");
            WriteLiteral(@"
            borderwidth: 1,
            steps: [
                { range: [0, 18], color: ""#FA5858"" },
                { range: [18, 19], color: ""#F7FE2E"" },
                { range: [19, 24], color: ""#2EFE2E"" },
                { range: [24, 25], color: ""#F7FE2E"" },
                { range: [25, 45], color: ""#FA5858"" }
            ],
        }
    }
];

var layoutUmidade = {
    width: 450,
    height: 300,
    margin: { t: 25, r: 25, l: 25, b: 25 },
    font: { color: ""black"", family: ""Arial"" }
};
Plotly.newPlot('umidade', dataUmidade, layoutUmidade);

//Handlebars para inserir dados na tabela
var tabela = document.querySelector("".table tbody"");

var tmplSource = document.getElementById(""tmplLinha"").innerHTML;
var tmplHandle = Handlebars.compile(tmplSource);

var dados = {};
dados.Hora = 01;
dados.Umidade = 05;
dados.Temperatura = 23;

    var linha = {};
        linha.template = document.createElement(""template"");;  
        linha.template.innerHTML = tmplHandle(dados)
 ");
            WriteLiteral("       linha.content = document.importNode(linha.template.content, true);\r\n\r\n        tabela.appendChild(linha.content);\r\n\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
