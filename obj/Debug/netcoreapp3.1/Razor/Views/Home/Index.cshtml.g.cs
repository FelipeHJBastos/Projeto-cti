#pragma checksum "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "57ee2e92bc55fafb3f093431d7bf6706b3c14df2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\felip\Documents\git\Projeto-cti\Views\_ViewImports.cshtml"
using Projeto_cti;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\felip\Documents\git\Projeto-cti\Views\_ViewImports.cshtml"
using Projeto_cti.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"57ee2e92bc55fafb3f093431d7bf6706b3c14df2", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"558e789309b424544315a43ae1039bee120fa5fc", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Projeto_cti.Models.Leituras>>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "57ee2e92bc55fafb3f093431d7bf6706b3c14df23023", async() => {
                WriteLiteral("\r\n    <script src=\'https://cdn.plot.ly/plotly-latest.min.js\'></script>\r\n    <script src=\'https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\'></script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div class=""content"">
    <div class=""container-fluid"">
        <div class=""row"">
            <div class=""col-md-6"">
                <div class=""card border-light mb-3 "" >
                    <div class=""card-header "">
                        <h4 class=""card-title"">Temperatura da Câmara</h4>
                    </div>
                    <div class=""card-body "">
                        <div id=""temperatura""></div>
                    </div>
                </div>
            </div>
            <div class=""col-md-6"">
                <div class=""card border-light mb-3"">
                    <div class=""card-header "">
                        <h4 class=""card-title"">Úmidade da Câmara</h4>
                    </div>
                    <div class=""card-body "">
                        <div id=""umidade""></div>
                    </div>
                </div>
            </div>
        </div>
        <div class=""row"">
            <div class=""col-lg-12"" style=""padding-top: 5px;background-co");
            WriteLiteral(@"lor: white;"">
                <div class=""card border-light mb-3"">
                    <div class=""form"">
                        <table class=""table"">
                            <thead class=""thead-dark"">
                                <th>Hora</th>
                                <th>Umidade</th>
                                <th>Temperatura</th>  
                            </thead>
");
#nullable restore
#line 41 "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml"
                             foreach (var item in Model)
                            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <tr>\r\n                                <td>");
#nullable restore
#line 44 "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml"
                               Write(item.Hora);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                                <td>");
#nullable restore
#line 45 "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml"
                               Write(item.Umidade);

#line default
#line hidden
#nullable disable
            WriteLiteral("%</td>\r\n                                <td>");
#nullable restore
#line 46 "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml"
                               Write(item.Temperatura);

#line default
#line hidden
#nullable disable
            WriteLiteral("</td>\r\n                            </tr>\r\n");
#nullable restore
#line 48 "C:\Users\felip\Documents\git\Projeto-cti\Views\Home\Index.cshtml"
                            }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
        var temperaturaChart = 21
        var umidadeChart = 70
    function mudaCharts () {
        function mudaUmidade (umidade){
            let maxUmidade = umidade + 1;
            let minUmidade = umidade - 1;
            let randomUmidade = Math.floor(Math.random()*(maxUmidade-minUmidade+1)+minUmidade)
            umidadeChart = randomUmidade

            var dataUmidade = [
                {
                    type: ""indicator"",
                    mode: ""gauge+number"",
                    value: umidadeChart,
                    number: {suffix: ""%""},
                    title: { text: ""Umidade"", font: { size: 24 } },
                    gauge: {
                        axis: { visible: false, range: [0, 100], tickwidth: 1},
                        bar: { color: ""#80FF00"" },
                        borderwidth: 1,
               ");
            WriteLiteral(@"         steps: [
                            { range: [0, 58], color: ""#FE2E2E"" },
                            { range: [58, 60], color: ""#F7FE2E"" },
                            { range: [60, 80], color: ""#2EFE2E"" },
                            { range: [80, 82], color: ""#F7FE2E"" },
                            { range: [82, 100], color: ""#FE2E2E"" }
                        ],
                    }
                }
            ];
            return Plotly.newPlot('umidade', dataUmidade, layoutUmidade);
        }

        function mudaTemperatura(temperatura){
            let maxTemperatura = temperatura + 1;
            let minTemperatura = temperatura - 1;
            let randomTemperatura = Math.floor(Math.random()*(maxTemperatura-minTemperatura+1)+minTemperatura)
            temperaturaChart = randomTemperatura

            dataTemperatura = [
                {
                    type: ""indicator"",
                    mode: ""gauge+number"",
                    value: temperaturaChart");
            WriteLiteral(@",
                    number: {suffix: ""°C""},
                    title: { text: ""Temperatura"", font: { size: 24 } },
                    gauge: {
                        axis: { visible: false, range: [0, 45], tickwidth: 1},
                        bar: { color: ""#80FF00"" },
                        borderwidth: 1,
                        steps: [
                            { range: [0, 18], color: ""#FE2E2E"" },
                            { range: [18, 19], color: ""#F7FE2E"" },
                            { range: [19, 24], color: ""#2EFE2E"" },
                            { range: [24, 25], color: ""#F7FE2E"" },
                            { range: [25, 45], color: ""#FE2E2E"" }
                        ],
                    }
                }
            ];
            return Plotly.newPlot('temperatura', dataTemperatura, layoutTemperatura);
        }
        return mudaUmidade(umidadeChart), mudaTemperatura(temperaturaChart)
    }

    var dataTemperatura = [
        {
            type: ");
            WriteLiteral(@"""indicator"",
            mode: ""gauge+number"",
            value: temperaturaChart,
            number: {suffix: ""°C""},
            title: { text: ""Temperatura"", font: { size: 24 } },
            gauge: {
                axis: { visible: false, range: [0, 45], tickwidth: 1},
                bar: { color: ""#80FF00"" },
                borderwidth: 1,
                steps: [
                    { range: [0, 18], color: ""#FE2E2E"" },
                    { range: [18, 19], color: ""#F7FE2E"" },
                    { range: [19, 24], color: ""#2EFE2E"" },
                    { range: [24, 25], color: ""#F7FE2E"" },
                    { range: [25, 45], color: ""#FE2E2E"" }
                ],
            }
        }
    ];

    var layoutTemperatura = {
        width: 450,
        height: 300,
        margin: { t: 25, r: 25, l: 25, b: 25 },
        font: { color: ""black"", family: ""Arial"" }
    };


    var dataUmidade = [
        {
            type: ""indicator"",
            mode: ""gauge+numbe");
            WriteLiteral(@"r"",
            value: umidadeChart,
            number: {suffix: ""%""},
            title: { text: ""Umidade"", font: { size: 24 } },
            gauge: {
                axis: { visible: false, range: [0, 100], tickwidth: 1},
                bar: { color: ""#80FF00"" },
                borderwidth: 1,
                steps: [
                    { range: [0, 58], color: ""#FE2E2E"" },
                    { range: [58, 60], color: ""#F7FE2E"" },
                    { range: [60, 80], color: ""#2EFE2E"" },
                    { range: [80, 82], color: ""#F7FE2E"" },
                    { range: [82, 100], color: ""#FE2E2E"" }
                ],
            }
        }
    ];

    var layoutUmidade = {
        width: 450,
        height: 300,
        margin: { t: 25, r: 25, l: 25, b: 25 },
        font: { color: ""black"", family: ""Arial"" }
    };

    Plotly.newPlot('temperatura', dataTemperatura, layoutTemperatura);
    Plotly.newPlot('umidade', dataUmidade, layoutUmidade);
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Projeto_cti.Models.Leituras>> Html { get; private set; }
    }
}
#pragma warning restore 1591
